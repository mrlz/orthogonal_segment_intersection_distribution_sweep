#include "distribution_sweep.h"
#include <random>
#include <fstream>

int max = INT_MAX;

// std::default_random_engine generator; //this will always produce the same sequence, unless we change the seed

std::random_device rand_dev; //these will produce different sequences everytime
std::mt19937 generator(rand_dev());
const int start = 0;
std::uniform_int_distribution<int> uniform_distribution(start,(const int)max);

// double binomial_probability(int target_mean, int variance){
// return 1.0-((double)variance/target_mean);
// }
//
// double binomial_number_of_trials(int target_mean, double probability){
// return ((double)target_mean)/probability;
// }

void generate_different_pair(int *y1, int *y2){
  int yy = uniform_distribution(generator);
  int xx = uniform_distribution(generator);
  while(yy == xx){
    xx = uniform_distribution(generator);
  }
  *y1 = yy;
  *y2 = xx;
}

void populate_verticals_uniform(array_buffer* line_buffer, int vertical_lines){
  const int maxx = max;

  //uniform distribution
  std::uniform_int_distribution<int> vertical_x_distribution(start,maxx); //params (a,b) lower and upper bound
  //uniform distribution

  int i = 0;
  while(i < vertical_lines){
    int x = vertical_x_distribution(generator);
    // std::cout << x << std::endl;
    int y1;
    int y2;
    generate_different_pair(&y1,&y2);
    line l;
    l.x1 = x;
    l.x2 = x;
    if (y1 < y2){
    l.y1 = y1;
    l.y2 = y2;
    }else{
      l.y1 = y2;
      l.y2 = y1;
    }
    line_buffer->insert_element(&l);
    i++;
  }
}

void populate_verticals_binomial(array_buffer* line_buffer, int vertical_lines){
  //binomial distribution
    // double p = binomial_probability(mean,variance); //We approximate a normal distribution with given mean and variance
    // double n = binomial_number_of_trials(mean,p);
    double p = 0.5;
    std::binomial_distribution<int> vertical_x_distribution(max,p); //params (n,p) trials,probability of success
  //binomial distribution

  int i = 0;
  while(i < vertical_lines){
    int x = vertical_x_distribution(generator);
    // std::cout << x << std::endl;
    int y1;
    int y2;
    generate_different_pair(&y1,&y2);
    line l;
    l.x1 = x;
    l.x2 = x;
    if (y1 < y2){
    l.y1 = y1;
    l.y2 = y2;
    }else{
      l.y1 = y2;
      l.y2 = y1;
    }
    line_buffer->insert_element(&l);
    i++;
  }
}

void generate_sample_file(std::string filename, int size, double alfa, int distribution_type){
  // std::cout << "generating " << distribution_type << std::endl;
  int generation_reads = 0;
  int generation_writes = 0;
  int B_lines = 512.0/(4*DATA_TYPE_SIZE);
  array_buffer *line_buffer = new array_buffer(1,1,B_lines,filename, &generation_reads, &generation_writes);
  int lines = pow(2,size);
  int horizontal_lines = (int)lines*alfa;
  int vertical_lines = lines-horizontal_lines;
  // std::cout << "ELEMENTS: " << lines << " H: " << horizontal_lines << " V: " << vertical_lines << " total: " << horizontal_lines + vertical_lines << std::endl;

  // std::cout << "populating verticals" << std::endl;
  if (distribution_type == 0){
    populate_verticals_uniform(line_buffer, vertical_lines);
  }else{
    populate_verticals_binomial(line_buffer, vertical_lines);
  }
  // std::cout << "populating horizontals" << std::endl;

  int i = 0;
  while(i < horizontal_lines){
    int x1;
    int x2;
    generate_different_pair(&x1,&x2);
    int y = uniform_distribution(generator);
    line l;
    l.y1 = y;
    l.y2 = y;
    if (x1 < x2){
      l.x1 = x1;
      l.x2 = x2;
    }else{
      l.x1 = x2;
      l.x2 = x1;
    }
    line_buffer->insert_element(&l);
    i++;
  }
  line_buffer->dump_remaining_items();
  line_buffer->delete_buffer();
  line_buffer->close_file();
  delete line_buffer;
  // std::cout << "done generating" << std::endl;
}
//
// void generation_test(std::string destination){
//   //first parameter is exponent of 2^i, second is alfa
//   double exponent = 3.0;
//   double alfa = 0.5;
//   std::cout << "1" << std::endl;
//   generate_sample_file(destination,exponent, alfa,0);
//     std::cout << "2" << std::endl;
//   int lines = pow(2,exponent);
//   line *read_buffer = new line[lines];
//   int reads = 0;
//   retrieve_lines(destination, read_buffer, &reads);
//   //1 prints all lines in screen, 0 just gives the stats
//   print_all_lines(read_buffer, lines, 1);
// }
//
// void mergesort_test(std::string source, std::string destination, int type){
//   std::cout << "--------------------------------------------" << std::endl;
//   // char source[80] = "myfile3.txt";
//   // char destination[80] = "sorted.txt";
//   std::cout << "MERGESORT" << std::endl;
//   //k_way_mergesort(source_file, output_file, memory size in bytes, blocksize in bytes, type of sort)
//   //types of sort are 0: sort by x1, 1: sort by y1
//   double aprox = k_way_mergesort(source, destination, 100000000.0,4096.0, type,"");
//   file_stats(destination);
//   std::cout << "MERGESORT READS = " << DISK_READS << std::endl;
//   std::cout << "MERGESORT WRITES = " << DISK_WRITES << std::endl;
//   double c = (double)DISK_READS/aprox;
//   std::cout << "With C = " << c << " we have C*nlog(n) = " << c <<"*"<<aprox <<" = "  << c*aprox << std::endl;
//   if (type == 1){
//   int lines = total_lines_in_file(destination);
//   std::cout << "WILL NOW PRINT " << lines << " lines" << std::endl;
//   line *read_buffer = new line[lines];
//   int reads = 0;
//   retrieve_lines(destination,read_buffer,&reads);
//   print_all_lines(read_buffer, lines, 1);
//   }else{
//   int nums = total_elements_in_file(destination);
//   int *numbers = new int[nums];
//   int reads = 0;
//   retrieve_elements(destination,numbers,&reads);
//   print_all_elements(numbers,nums,1);
//   }
//   std::cout << "--------------------------------------------" << std::endl;
// }
//
// void generation_of_x_test(){
//   const char* filename = "DATASET";
//   const char* destination = "sorted.txt";
//   std::cout << "GENERATED SEQUENCE" << std::endl;
//   generation_test(filename);
//   mergesort_test(filename,destination,1);
//   std::cout << "DONE MERGESORTING" << std::endl;
//   int re = 0;
//   std::string neu = generate_X_file(filename,256,1024);
//   int total_elements = total_elements_in_file(neu);
//   int *int_buf = new int[total_elements];
//   int total = retrieve_elements(neu,int_buf,&re);
//   // std::cout << "6" << std::endl;
//   std::cout << "x coordinates of endpoints" << std::endl;
//   print_all_elements(int_buf, total, 1);
//   std::cout << "-----------------------------------------" << std::endl;
//   delete[] int_buf;
//   const char* new_destination = "sorted_x.txt";
//   mergesort_test(neu,new_destination,0);
// }
//
// void generation_of_x_i_test(){
//   const char* sorted_x = "sorted_x.txt";
//   double s = 3.0;
//   double N = total_elements_in_file(sorted_x); // N = number of input objects in the problem
//   int elements_per_slab = (int)ceil(N/s); // We aim to have this many elements per slab, however due to possible repeated
//   //values and other intricacies it might well be that the slabs have a different amount of elements
//   int slabs = (int)s;
//
//   //SELECTION OF BOUNDARIES FOR SLABS
//   int *x_i = new int[slabs+1]; //It's highly unlikely that the amount of slabs will exceed the stack size, but just in case.
//   int *indexes = new int[slabs+1];
//   elements_per_slab = 2;
//   choose_xi(x_i, sorted_x, 1024, indexes, 3, 9, slabs,"");
//   std::cout << "X_i:" << std::endl;
//   print_all_elements(x_i,slabs+1,1);
//   std::cout << "INDEXES" << std::endl;
//   print_all_elements(indexes,slabs+1,1);
//   delete[] x_i;
//   delete[] indexes;
// }
//
// void generate_hard_coded_sample(){
//   std::string filename = "SIMPLE_DATASET";
//   int r = 0;
//   int w = 0;
//   line * lines = new line[8];
//   lines[0].x1 = 1; lines[0].y1 = 0; lines[0].x2 = 1; lines[0].y2 = 3;
//   lines[1].x1 = 2; lines[1].y1 = 1; lines[1].x2 = 2; lines[1].y2 = 4;
//   lines[2].x1 = 6; lines[2].y1 = 2; lines[2].x2 = 6; lines[2].y2 = 4;
//   lines[3].x1 = 9; lines[3].y1 = 2; lines[3].x2 = 9; lines[3].y2 = 4;
//   lines[4].x1 = 7; lines[4].y1 = 7; lines[4].x2 = 7; lines[4].y2 = 9;
//   lines[5].x1 = 4; lines[5].y1 = 6; lines[5].x2 = 4; lines[5].y2 = 9;
//   lines[6].x1 = 0; lines[6].y1 = 2; lines[6].x2 = 2; lines[6].y2 = 2;
//   lines[7].x1 = 5; lines[7].y1 = 5; lines[7].x2 = 9; lines[7].y2 = 5;
//   array_buffer *out = new array_buffer(1,1,32,filename,&r,&w);
//   int i = 0;
//   while(i < 8){
//     out->insert_element(&(lines[i]));
//     i++;
//   }
//   delete[] lines;
//   out->dump_remaining_items();
//   out->delete_buffer();
//   out->close_file();
// }
//
// void test_slab_generation(){
//   double memory = 2000000.0;
//   double blocksize = 512.0;
//   int r = 0;
//   generate_hard_coded_sample();
//   std::string source = "SIMPLE_DATASET";
//   std::string sorted_y = "SIMPLE_DATASET_Y";
//   std::string sorted_x = "SIMPLE_DATASET_X";
//   output_lines(source);
//   k_way_mergesort(source, sorted_y, memory, blocksize, 1,"");
//   output_lines(sorted_y);
//   generate_X_file(source, 32, 128);
//   k_way_mergesort(sorted_x,sorted_x,memory,blocksize,0,"");
//   output_elements(sorted_x);
//   int *x_i = new int[5];
//   int *indexes = new int[5];
//   int a_s = choose_xi(x_i, sorted_x, 128, indexes, 0, 10, 4,"");
//   std::cout << "CHOOSE made " << a_s << " slabs" << std::endl;
//   print_all_elements(x_i,5,1);
//   print_all_elements(indexes,5,1);
//
//   int *x_ii = new int[5];
//   int *indexes1 = new int[5];
//   a_s = choose_xi(x_ii,sorted_x,128,indexes1,0,3,4,"");
//   std::cout << "CHOOSE made " << a_s << " slabs" << std::endl;
//   print_all_elements(x_ii,5,1);
//   print_all_elements(indexes1,5,1);
// }
//
// void test_segment_intersection(){ //This fits in main memory and checks the base case
//   double memory = 2000000.0;
//   double blocksize = 512.0;
//   generate_hard_coded_sample();
//   std::string source = "SIMPLE_DATASET";
//   int intersections = orthogonal_segment_intersection(source, memory, blocksize, 1, 0, 1);
//   std::cout << "TOTAL INTERSECTIONS = " << intersections << std::endl;
// }
//
// void test_small_dataset(){
//   struct timespec start, end;
//   double memory = 512.0;
//   double blocksize = 64.0;
//   int B_ints = (int) (blocksize/4.0);
//   std::string source = "NEW_DATASET";
//   //generate_sample_file(source, 7.0,  0.20);
//   clock_gettime(CLOCK_MONOTONIC, &start);
//   unsigned long long intersections = orthogonal_segment_intersection(source,memory,blocksize, 0, 0, 1);
//   clock_gettime(CLOCK_MONOTONIC, &end);
//   std::cout << "TOTAL TIME OF ORTHOGONAL SEGMENT INTERSECTION = ";
//   operation_time(start,end);
//   std::cout << std::endl;
//   std::cout << "TOTAL INTERSECTIONS = " << intersections << std::endl;
//   int print_intersections = 1;
//   if (print_intersections==1){
//     std::string file = "INTERSECTIONS";
//     int a = 0;
//     array_buffer* intersection_buffer = new array_buffer(0,0,B_ints,file,&a,&a);
//     intersection_buffer->count_elements_in_disk();
//     while(intersection_buffer->number_of_stored_elements() > 0){
//       int *x =  (int *)intersection_buffer->retrieve_element();
//       int *y =  (int *)intersection_buffer->retrieve_element();
//       std::cout << "(" << *x << ","<<*y<<")" << std::endl;
//     }
//   }
// }
//
// void test_33_billion_intersections(){
//   //double memory = 2000000.0;
//   struct timespec start, end;
//   //double memory = 50331648.0;
//   //double memory = 2000000.0;
//   double memory = 25165824.0;
//   double blocksize = 512.0;
//   int B_ints = (int) (blocksize/4.0);
//   std::string source = "MEDIUM_DATASET";
//   //generate_sample_file(source, 7.0,  0.20);
//   int print_intersections = 0;
//   clock_gettime(CLOCK_MONOTONIC, &start);
//   //arguments are source name, memory size in kb, blocksize in kb, general prints enabled (1) or disabled (0),
//   //intersection reporting enabled (1) or disabled (0) and progress prints enabled (1) or disabled (0)
//   unsigned long long intersections = orthogonal_segment_intersection(source,memory,blocksize, 0, 0, 1);
//   clock_gettime(CLOCK_MONOTONIC, &end);
//   std::cout << "TOTAL TIME OF ORTHOGONAL SEGMENT INTERSECTION = ";
//   operation_time(start,end);
//   std::cout << std::endl;
//   std::cout << "TOTAL INTERSECTIONS = " << intersections << std::endl;
//
//   if (print_intersections==1){ //storing all the intersections takes ~ 245Gb, so don't.
//     std::string file = "INTERSECTIONS";
//     int a = 0;
//     array_buffer* intersection_buffer = new array_buffer(0,0,B_ints,file,&a,&a);
//     intersection_buffer->count_elements_in_disk();
//     while(intersection_buffer->number_of_stored_elements() > 0){
//       int *x =  (int *)intersection_buffer->retrieve_element();
//       int *y =  (int *)intersection_buffer->retrieve_element();
//       std::cout << "(" << *x << ","<<*y<<")" << std::endl;
//     }
//   }
// }
//
// void print_intersections_of_small_sample(){
//   //double memory = 2000000.0;
//   struct timespec start, end;
//   //double memory = 50331648.0;
//   //double memory = 2000000.0;
//   double memory = 512.0;
//   double blocksize = 64.0;
//   int B_ints = (int) (blocksize/4.0);
//   std::string source = "NEW_DATASET";
//   //generate_sample_file(source, 7.0,  0.20);
//   int print_intersections = 1;
//   clock_gettime(CLOCK_MONOTONIC, &start);
//   //arguments are source name, memory size in kb, blocksize in kb, general prints enabled (1) or disabled (0),
//   //intersection reporting enabled (1) or disabled (0) and progress prints enabled (1) or disabled (0)
//   unsigned long long intersections = orthogonal_segment_intersection(source,memory,blocksize, 0, 0, 0);
//   clock_gettime(CLOCK_MONOTONIC, &end);
//   std::cout << "TOTAL TIME OF ORTHOGONAL SEGMENT INTERSECTION = ";
//   operation_time(start,end);
//   std::cout << std::endl;
//   std::cout << "TOTAL INTERSECTIONS = " << intersections << std::endl;
//
//   if (print_intersections==1){
//     std::cout << "PRINTING INTERSECTIONS:" << std::endl;
//     std::string file = "INTERSECTIONS";
//     int a = 0;
//     array_buffer* intersection_buffer = new array_buffer(0,0,B_ints,file,&a,&a);
//     intersection_buffer->count_elements_in_disk();
//     while(intersection_buffer->number_of_stored_elements() > 0){
//       int *x =  (int *)intersection_buffer->retrieve_element();
//       int *y =  (int *)intersection_buffer->retrieve_element();
//       std::cout << "(" << *x << ","<<*y<<")" << std::endl;
//     }
//   }
// }
double meaningful_memory(int size){
  if (size == 9){
    return 1536.0;
  }
  int lines = pow(2,size);
  double memory = lines*16.0;
  return memory/10.0;
}

void reset_counters(unsigned long long* average_measurements, double* average_estimates){
  int j = 0;
  while(j < 8){
    average_measurements[j] = 0;
    average_estimates[j] = 0.0;
    j++;
  }
  while(j < 11){
    average_estimates[j] = 0.0;
    j++;
  }
}

int main(){

  struct timespec time_start, time_end;
  struct timespec elapsed_time_start, elapsed_time_end;
  double alfa = 0.25;

  int size = 14;
  int max_size = 15;

  int distribution_type = 0;

  double blocksize = 8192.0;
  double memory = 25165824.0;

  int iteration = 0;
  int number_of_iterations_per_setting = 3;

  unsigned long long *average_measurements = new unsigned long long[8];
  double *average_estimates = new double[11];
  double average_time = 0.0;
  unsigned long long average_intersections = 0;

  std::ofstream out("RAW_DATA.csv");
  std::ofstream avg_data("AVERAGE_DATA.csv");
  out << "Branching , Blocksize , Memory, Iteration , Alfa , Size , Dist_type , X_read , X_write , X_time, X_nlogn , X_c , Y_read , Y_write , Y_time, Y_nlogn , Y_c , DS_read , DS_write , DS_IO , DS_time , DS_nlogn , DS_c , I_read, I_write , I_TB , I_c , MERGESORT_READ , MERGESORT_WRITE , MERGESORT_TIME , TOTAL_TIME , Intersections" << std::endl;
  avg_data << "Branching , Blocksize , Memory , Alfa , Size , Dist_type , X_read , X_write , X_time, X_nlogn , X_c , Y_read , Y_write , Y_time, Y_nlogn , Y_c , DS_read , DS_write , DS_IO, DS_time , DS_nlogn , DS_c , I_read, I_write , I_TB , I_c , MERGESORT_READ , MERGESORT_WRITE , MERGESORT_TIME , TOTAL_TIME , Intersections" << std::endl;
  clock_gettime(CLOCK_MONOTONIC, &elapsed_time_start);
  while(alfa < 0.8){
    size = 14;
    while(size < max_size+1){
      distribution_type = 0;
      while(distribution_type < 2){
        iteration = 0;
        std::cout << "SIZE:" << size << " ALFA:" << alfa << " DIST:" << distribution_type << std::endl;
        reset_counters(average_measurements, average_estimates);
        average_time = 0.0;
        average_intersections = 0;
        while(iteration < number_of_iterations_per_setting){
	std::cout << "	GENERATING DATA" << std::endl;
        // std::cout << "Iteration = " << iteration << ", Alfa = " << alfa << ", Size = " << size << ", distribution_type = " << distribution_type << std::endl;
        // std::string file = "MEDIUM_DATASET";
        std::string file = "SOURCEFILE";
        unsigned long long *measurements = new unsigned long long[8];
        double *estimates = new double[11];

	clock_gettime(CLOCK_MONOTONIC, &time_start);
        generate_sample_file(file, size, alfa, distribution_type);
	clock_gettime(CLOCK_MONOTONIC, &time_end);
	double generation_time = operation_time_in_seconds(operation_time_in_nanos(time_start,time_end));
	std::cout << "	DONE GENERATING, took: " << generation_time << std::endl;
        memory = meaningful_memory(size);
	std::cout << "	STARTING OSI-DS" << std::endl;
        clock_gettime(CLOCK_MONOTONIC, &time_start);
        //arguments are source name, memory size in kb, blocksize in kb, general prints enabled (1) or disabled (0),
        //intersection reporting enabled (1) or disabled (0) and progress prints enabled (1) or disabled (0)
        unsigned long long intersections = orthogonal_segment_intersection(file,memory,blocksize, 0, 0, 0, measurements, estimates);
        clock_gettime(CLOCK_MONOTONIC, &time_end);

        double total_time = operation_time_in_seconds(operation_time_in_nanos(time_start,time_end));
	std::cout << "	Iteration "<< iteration << " done, took: " << total_time << std::endl;
        out  << 4 << "," << blocksize << "," << memory << "," << iteration << "," << alfa << "," << size << "," << distribution_type << "," << measurements[0] << "," << measurements[1] << "," << estimates[0] << "," << estimates[1] << "," << estimates[2] << "," << measurements[2] << "," << measurements[3] << "," << estimates[3] << "," << estimates[4] << "," << estimates[5] << "," << measurements[4] << "," << measurements[5] << "," << measurements[4] + measurements[5] << "," << estimates[6] << "," << estimates[7] << "," << estimates[8] << "," << measurements[6] << "," << measurements[7] << "," << estimates[9] << "," << estimates[10] << "," << measurements[0] + measurements[2] << "," << measurements[1] + measurements[3] << "," << estimates[0] + estimates[3] << "," << total_time << "," << intersections << std::endl;
        iteration++;
        int j = 0;
        while (j < 8){
          average_measurements[j] = average_measurements[j] + measurements[j];
          average_estimates[j] = average_estimates[j] + estimates[j];
          j++;
        }
        while(j < 11){
          average_estimates[j] = average_estimates[j] + estimates[j];
          j++;
        }
        average_time = average_time + total_time;
        average_intersections = average_intersections + intersections;
        }
        avg_data  << 4 << "," << blocksize << "," << memory  << "," << alfa << "," << size << "," << distribution_type << "," << average_measurements[0]/number_of_iterations_per_setting << "," << average_measurements[1]/number_of_iterations_per_setting << "," << ((double)average_estimates[0])/number_of_iterations_per_setting << "," << ((double)average_estimates[1])/number_of_iterations_per_setting << "," << ((double)average_estimates[2])/number_of_iterations_per_setting << "," << average_measurements[2]/number_of_iterations_per_setting << "," << average_measurements[3]/number_of_iterations_per_setting << "," << ((double)average_estimates[3])/number_of_iterations_per_setting << "," << ((double)average_estimates[4])/number_of_iterations_per_setting << "," << ((double)average_estimates[5])/number_of_iterations_per_setting << "," << average_measurements[4]/number_of_iterations_per_setting << "," << average_measurements[5]/number_of_iterations_per_setting << "," << (average_measurements[4]+average_measurements[5])/number_of_iterations_per_setting << "," << ((double)average_estimates[6])/number_of_iterations_per_setting << "," << ((double)average_estimates[7])/number_of_iterations_per_setting << "," << ((double)average_estimates[8])/number_of_iterations_per_setting << "," << average_measurements[6]/number_of_iterations_per_setting << "," << average_measurements[7]/number_of_iterations_per_setting << "," << ((double)average_estimates[9])/number_of_iterations_per_setting << "," << ((double)average_estimates[10])/number_of_iterations_per_setting << "," << (average_measurements[0]+average_measurements[2])/number_of_iterations_per_setting  << "," << ((double)average_measurements[1])/number_of_iterations_per_setting + ((double)average_measurements[3])/number_of_iterations_per_setting << "," << ((double)average_estimates[0])/number_of_iterations_per_setting + ((double)average_estimates[3])/number_of_iterations_per_setting << "," << ((double)average_time)/number_of_iterations_per_setting << "," << average_intersections/number_of_iterations_per_setting << std::endl;
        distribution_type++;
      }
      size++;
    }
    alfa = alfa + 0.25;
  }
  out.close();
  avg_data.close();
  clock_gettime(CLOCK_MONOTONIC, &elapsed_time_end);
  double elapsed_time = operation_time_in_seconds(operation_time_in_nanos(elapsed_time_start,elapsed_time_end));
  std::cout << "elapsed time: " << elapsed_time << "s = " << elapsed_time/60.0 << "m" << std::endl;
  return 0;
}
